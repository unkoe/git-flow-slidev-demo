"use strict";Object.defineProperty(exports, "__esModule", {value: true});
















var _chunkZWMIEBCOjs = require('./chunk-ZWMIEBCO.js');

// src/fs.ts
var _fs = require('fs');
var _path = require('path');
async function load(filepath, themeMeta, content) {
  const dir = _path.dirname.call(void 0, filepath);
  const markdown = content != null ? content : await _fs.promises.readFile(filepath, "utf-8");
  const data = _chunkZWMIEBCOjs.parse.call(void 0, markdown, filepath, themeMeta);
  const entries = /* @__PURE__ */ new Set([
    filepath
  ]);
  for (let iSlide = 0; iSlide < data.slides.length; ) {
    const baseSlide = data.slides[iSlide];
    if (!baseSlide.frontmatter.src) {
      iSlide++;
      continue;
    }
    data.slides.splice(iSlide, 1);
    const srcExpression = baseSlide.frontmatter.src;
    const path = _path.resolve.call(void 0, dir, srcExpression);
    const raw = await _fs.promises.readFile(path, "utf-8");
    const subSlides = _chunkZWMIEBCOjs.parse.call(void 0, raw, path, themeMeta);
    for (const [offset, subSlide] of subSlides.slides.entries()) {
      const slide = _chunkZWMIEBCOjs.__spreadValues.call(void 0, {}, baseSlide);
      slide.source = _chunkZWMIEBCOjs.__spreadValues.call(void 0, {
        filepath: path
      }, subSlide);
      if (offset === 0 && !baseSlide.frontmatter.srcSequence) {
        slide.inline = _chunkZWMIEBCOjs.__spreadValues.call(void 0, {}, baseSlide);
        delete slide.inline.frontmatter.src;
        Object.assign(slide, slide.source, { raw: null });
      } else {
        Object.assign(slide, slide.source);
      }
      const baseSlideFrontMatterWithoutSrc = _chunkZWMIEBCOjs.__spreadValues.call(void 0, {}, baseSlide.frontmatter);
      delete baseSlideFrontMatterWithoutSrc.src;
      slide.frontmatter = _chunkZWMIEBCOjs.__spreadProps.call(void 0, _chunkZWMIEBCOjs.__spreadValues.call(void 0, _chunkZWMIEBCOjs.__spreadValues.call(void 0, {}, subSlide.frontmatter), baseSlideFrontMatterWithoutSrc), {
        srcSequence: `${baseSlide.frontmatter.srcSequence ? `${baseSlide.frontmatter.srcSequence},` : ""}${srcExpression}`
      });
      data.features = _chunkZWMIEBCOjs.mergeFeatureFlags.call(void 0, data.features, _chunkZWMIEBCOjs.detectFeatures.call(void 0, raw));
      entries.add(path);
      data.slides.splice(iSlide + offset, 0, slide);
    }
  }
  for (let iSlide = 0; iSlide < data.slides.length; iSlide++)
    data.slides[iSlide].index = iSlide === 0 ? 0 : 1 + data.slides[iSlide - 1].index;
  data.entries = Array.from(entries);
  return data;
}
async function save(data, filepath) {
  filepath = filepath || data.filepath;
  await _fs.promises.writeFile(filepath, _chunkZWMIEBCOjs.stringify.call(void 0, data), "utf-8");
}
async function saveExternalSlide(slide) {
  await _fs.promises.writeFile(slide.filepath, _chunkZWMIEBCOjs.stringifySlide.call(void 0, slide), "utf-8");
}


















exports.detectFeatures = _chunkZWMIEBCOjs.detectFeatures; exports.filterDisabled = _chunkZWMIEBCOjs.filterDisabled; exports.load = load; exports.mergeFeatureFlags = _chunkZWMIEBCOjs.mergeFeatureFlags; exports.parse = _chunkZWMIEBCOjs.parse; exports.parseAspectRatio = _chunkZWMIEBCOjs.parseAspectRatio; exports.parseRangeString = _chunkZWMIEBCOjs.parseRangeString; exports.parseSlide = _chunkZWMIEBCOjs.parseSlide; exports.prettify = _chunkZWMIEBCOjs.prettify; exports.prettifySlide = _chunkZWMIEBCOjs.prettifySlide; exports.resolveConfig = _chunkZWMIEBCOjs.resolveConfig; exports.resolveFonts = _chunkZWMIEBCOjs.resolveFonts; exports.save = save; exports.saveExternalSlide = saveExternalSlide; exports.scanMonacoModules = _chunkZWMIEBCOjs.scanMonacoModules; exports.stringify = _chunkZWMIEBCOjs.stringify; exports.stringifySlide = _chunkZWMIEBCOjs.stringifySlide;
